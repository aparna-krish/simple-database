package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private JoinPredicate joinPred;
    private OpIterator childIter1;
    private OpIterator childIter2;
    private Tuple tup1;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        this.joinPred = p;
        this.childIter1 = child1;
        this.childIter2 = child2;
        this.tup1 = null;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return joinPred;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return this.childIter1.getTupleDesc().getFieldName(joinPred.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return this.childIter2.getTupleDesc().getFieldName(joinPred.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here

        // Get both TupleDescs and merge
        return TupleDesc.merge(this.childIter1.getTupleDesc(), this.childIter2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        super.open();
        this.childIter1.open();
        this.childIter2.open();
    }

    public void close() {
        // some code goes here
        this.childIter1.close();
        this.childIter2.close();
        super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        this.childIter1.rewind();
        this.childIter2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        while (tup1 != null || childIter1.hasNext()) {
            if (tup1 == null) {
                if (childIter1.hasNext()) {
                    tup1 = childIter1.next();
                } else {
                    break;
                }
            }
            while (childIter2.hasNext()) {
                Tuple tup2 = childIter2.next();
                if (this.joinPred.filter(tup1, tup2)) {
                    TupleDesc newTd = this.getTupleDesc();
                    Tuple newTuple = new Tuple(newTd);
                    for (int i = 0; i < this.childIter1.getTupleDesc().numFields(); i++) {
                        newTuple.setField(i, tup1.getField(i));
                    }
                    for (int i = 0; i < this.childIter2.getTupleDesc().numFields(); i++) {
                        newTuple.setField(i + this.childIter1.getTupleDesc().numFields(), tup2.getField(i));
                    }
                    return newTuple;
                }
            }
            tup1 = null;
            childIter2.rewind();
            
        }
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        OpIterator[] newChildIter = new OpIterator[2];
        newChildIter[0] = this.childIter1;
        newChildIter[1] = this.childIter2;
        return newChildIter;
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
        this.childIter1 = children[0];
        this.childIter2 = children[1];
    }

}